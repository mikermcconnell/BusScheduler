# Frontend Environment Variables
# Copy this file to .env.local for local development

# API Configuration
REACT_APP_API_URL=http://localhost:5000/api/v1

# Environment
REACT_APP_ENV=development

# Feature Flags
REACT_APP_ENABLE_AUTH=true
REACT_APP_ENABLE_ANALYTICS=false
REACT_APP_ENABLE_DEBUG=true

# File Upload Limits (in bytes)
REACT_APP_MAX_FILE_SIZE=10485760

# UI Configuration
REACT_APP_ITEMS_PER_PAGE=20
REACT_APP_SESSION_TIMEOUT=1800000

# Google Drive API Configuration
# Get these from Google Cloud Console: https://console.cloud.google.com/
# 1. Create a new project or select existing one
# 2. Enable Google Drive API
# 3. Go to Credentials → Create Credentials → OAuth 2.0 Client ID
# 4. Configure consent screen and add authorized origins
# 5. Copy the Client ID and API Key here

# Google OAuth 2.0 Client ID (from Google Cloud Console)
REACT_APP_GOOGLE_CLIENT_ID=your_google_client_id_here.apps.googleusercontent.com

# Google API Key (from Google Cloud Console)  
REACT_APP_GOOGLE_API_KEY=your_google_api_key_here

# Example values (replace with your actual credentials):
# REACT_APP_GOOGLE_CLIENT_ID=123456789-abcdef.apps.googleusercontent.com
# REACT_APP_GOOGLE_API_KEY=AIzaSyABCDEF123456789

# Firebase Configuration
# Get these values from your Firebase project settings:
# 1. Go to https://console.firebase.google.com/
# 2. Select your project
# 3. Click the gear icon → Project settings
# 4. Scroll down to "Your apps" section
# 5. If no web app exists, click "Add app" and select web (</>) icon
# 6. Copy the configuration values below

# Firebase API Key (from config object)
REACT_APP_FIREBASE_API_KEY=your_api_key_here

# Firebase Auth Domain (usually projectname.firebaseapp.com)
REACT_APP_FIREBASE_AUTH_DOMAIN=your_project.firebaseapp.com

# Firebase Project ID (your project identifier)
REACT_APP_FIREBASE_PROJECT_ID=your_project_id

# Firebase Storage Bucket (usually projectname.firebasestorage.app)
REACT_APP_FIREBASE_STORAGE_BUCKET=your_project.firebasestorage.app

# Firebase Messaging Sender ID (numeric value from config)
REACT_APP_FIREBASE_MESSAGING_SENDER_ID=123456789

# Firebase App ID (starts with 1: and contains web identifier)
REACT_APP_FIREBASE_APP_ID=1:123456789:web:abc123def456

# Firebase Measurement ID (for Google Analytics, optional)
REACT_APP_FIREBASE_MEASUREMENT_ID=G-ABCDEFGHIJ

# Magic Link Authentication Configuration
# Domain where the app is hosted (used for email link redirects)
# For local development: http://localhost:3000
# For production: https://yourdomain.com
REACT_APP_MAGIC_LINK_DOMAIN=http://localhost:3000

# Optional: Firebase Dynamic Links domain (if using Firebase Dynamic Links)
# Leave empty if not using Dynamic Links
REACT_APP_DYNAMIC_LINK_DOMAIN=

# Development Settings
# Set to true to use Firebase emulators for local development
# Requires Firebase CLI: npm install -g firebase-tools
# Start emulators with: firebase emulators:start
REACT_APP_USE_FIREBASE_EMULATOR=false

# Setup Instructions:
# 1. Copy this file to .env (remove .example extension)
# 2. Replace the placeholder values with your actual Google API credentials
# 3. Add your domain to Google Cloud Console authorized origins
# 4. For local development, add http://localhost:3000
# 5. Set up Firebase project and add configuration values above
# 6. Enable Firestore Database in Firebase Console
# 7. Configure authentication methods in Firebase Auth:
#    a. Go to Firebase Console → Authentication → Sign-in method
#    b. Enable "Email/Password" provider
#    c. Enable "Email link (passwordless sign-in)" option
#    d. Add authorized domains for magic links (localhost:3000 for dev)
# 8. Customize email templates (optional):
#    a. Go to Firebase Console → Authentication → Templates
#    b. Select "Email address verification" template
#    c. Customize the email content and branding
# 9. Restart your development server after adding credentials